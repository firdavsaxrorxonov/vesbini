import { useState } from "react";
import { useAuth } from "@/context/AuthContext";
import { useLanguage } from "@/context/LanguageContext";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

const countries = [
  'Uzbekistan',
  'Kazakhstan', 
  'Kyrgyzstan',
  'Tajikistan',
  'Russia'
];

const uzbekistanRegions = [
  '–¢–∞—à–∫–µ–Ω—Ç',
  '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
  '–ë—É—Ö–∞—Ä–∞',
  '–ê–Ω–¥–∏–∂–∞–Ω',
  '–ù–∞–º–∞–Ω–≥–∞–Ω',
  '–§–µ—Ä–≥–∞–Ω–∞',
  '–ù–∞–≤–æ–∏',
  '–î–∂–∏–∑–∞–∫',
  '–°—ã—Ä–¥–∞—Ä—å—è',
  '–ö–∞—à–∫–∞–¥–∞—Ä—å—è',
  '–°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å—è',
  '–•–æ—Ä–µ–∑–º',
  '–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω'
];

export function Login() {
  const [step, setStep] = useState<'register' | 'verify'>('register');
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    country: '',
    region: ''
  });
  const [verificationCode, setVerificationCode] = useState('');
  const [errors, setErrors] = useState<Record<string, string>>({});
  const { login, verifyUser } = useAuth();
  const { t } = useLanguage();

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.name.trim()) {
      newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
    }
    
    if (!formData.phone.trim()) {
      newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    } else if (!/^\+\d{12}$/.test(formData.phone.replace(/\s/g, ''))) {
      newErrors.phone = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }
    
    if (!formData.country) {
      newErrors.country = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É';
    }
    
    if (!formData.region.trim()) {
      newErrors.region = '–£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleRegister = () => {
    if (validateForm()) {
      // Simulate SMS sending
      setStep('verify');
    }
  };

  const handleVerify = () => {
    if (verificationCode === '1234') { // Demo code
      login(formData);
      verifyUser();
    } else {
      setErrors({ code: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
    }
  };

  const formatPhoneNumber = (value: string) => {
    const cleaned = value.replace(/\D/g, '');
    if (cleaned.startsWith('998')) {
      const formatted = cleaned.replace(/(\d{3})(\d{2})(\d{3})(\d{2})(\d{2})/, '+$1 $2 $3 $4 $5');
      return formatted;
    }
    return '+' + cleaned;
  };

  if (step === 'verify') {
    return (
      <div className="h-screen bg-background flex items-center justify-center p-4">
        <Card className="w-full max-w-md scale-in">
          <CardHeader className="text-center">
            <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <div className="text-2xl">üì±</div>
            </div>
            <CardTitle>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</CardTitle>
            <CardDescription>
              –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ SMS-–∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä {formData.phone}
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="code">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Label>
              <Input
                id="code"
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"
                value={verificationCode}
                onChange={(e) => setVerificationCode(e.target.value)}
                maxLength={4}
                className="text-center text-lg tracking-widest"
              />
              {errors.code && (
                <p className="text-sm text-destructive">{errors.code}</p>
              )}
            </div>
            
            <Button 
              onClick={handleVerify}
              disabled={verificationCode.length !== 4}
              className="w-full bg-primary hover:bg-primary/90"
            >
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
            </Button>
            
            <div className="text-center">
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => setStep('register')}
              >
                –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
              </Button>
            </div>
            
            <div className="text-center text-xs text-muted-foreground">
              –î–µ–º–æ –∫–æ–¥: 1234
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="h-screen bg-background flex items-center justify-center p-4">
      <Card className="w-full max-w-md scale-in">
        <CardHeader className="text-center">
          <div className="mx-auto mb-4">
            <h1 className="text-3xl font-bold text-primary">Vesbini</h1>
          </div>
          <CardTitle>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</CardTitle>
          <CardDescription>
            –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">–ü–æ–ª–Ω–æ–µ –∏–º—è</Label>
            <Input
              id="name"
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            />
            {errors.name && (
              <p className="text-sm text-destructive">{errors.name}</p>
            )}
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</Label>
            <Input
              id="phone"
              type="tel"
              placeholder="+998 90 123 45 67"
              value={formData.phone}
              onChange={(e) => setFormData({ 
                ...formData, 
                phone: formatPhoneNumber(e.target.value) 
              })}
            />
            {errors.phone && (
              <p className="text-sm text-destructive">{errors.phone}</p>
            )}
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="country">–°—Ç—Ä–∞–Ω–∞</Label>
            <Select value={formData.country} onValueChange={(value) => 
              setFormData({ ...formData, country: value, region: '' })
            }>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É" />
              </SelectTrigger>
              <SelectContent>
                {countries.map(country => (
                  <SelectItem key={country} value={country}>
                    {country}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.country && (
              <p className="text-sm text-destructive">{errors.country}</p>
            )}
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="region">–†–µ–≥–∏–æ–Ω</Label>
            {formData.country === 'Uzbekistan' ? (
              <Select value={formData.region} onValueChange={(value) => 
                setFormData({ ...formData, region: value })
              }>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω" />
                </SelectTrigger>
                <SelectContent>
                  {uzbekistanRegions.map(region => (
                    <SelectItem key={region} value={region}>
                      {region}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            ) : (
              <Input
                id="region"
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω"
                value={formData.region}
                onChange={(e) => setFormData({ ...formData, region: e.target.value })}
              />
            )}
            {errors.region && (
              <p className="text-sm text-destructive">{errors.region}</p>
            )}
          </div>
          
          <Button 
            onClick={handleRegister}
            className="w-full bg-primary hover:bg-primary/90"
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </Button>
          
          <div className="text-center text-xs text-muted-foreground">
            –ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
